git:
  depth: 1
language: objective-c
# osx_image: xcode7.3
services: docker
virt: vm
group: edge
env:
  global:
    - PROJECT_SPEC=grpcio
    - MB_ML_VER=2014
    - PLAT=aarch64
    - DOCKER_TEST_IMAGE=multibuild/xenial_arm64v8
#     - CONFIG=opt
#     - TEST=objc
#     - JOBS=1
#   matrix:
#     - SCHEME="RxLibraryUnitTests"
#       WORKSPACE="Tests.xcworkspace" TEST_PATH="src/objective-c/tests" BUILD_ONLY="false"
#       INTEROP_SERVER="false"
    # - SCHEME="InteropTestsLocalSSL"
    #   WORKSPACE="Tests.xcworkspace" TEST_PATH="src/objective-c/tests" BUILD_ONLY="false"
    #   INTEROP_SERVER="true"
    # - SCHEME="InteropTestsLocalCleartext"
    #   WORKSPACE="Tests.xcworkspace" TEST_PATH="src/objective-c/tests"  BUILD_ONLY="false"
    #   INTEROP_SERVER="true"
    # TODO(jcanizales): Make tests an app project (instead of library), so the following will work.
    # - SCHEME="InteropTestsRemote"
    #   WORKSPACE="Tests.xcworkspace" TEST_PATH="src/objective-c/tests" BUILD_ONLY="false"
    #   INTEROP_SERVER="true"
    # - SCHEME="HelloWorld"
    #   WORKSPACE="HelloWorld.xcworkspace" TEST_PATH="examples/objective-c/helloworld"
    #   BUILD_ONLY="true" INTEROP_SERVER="false"
    # - SCHEME="RouteGuideClient"
    #   WORKSPACE="RouteGuideClient.xcworkspace" TEST_PATH="examples/objective-c/route_guide"
    #   BUILD_ONLY="true" INTEROP_SERVER="false"
    # - SCHEME="AuthSample"
    #   WORKSPACE="AuthSample.xcworkspace" TEST_PATH="examples/objective-c/auth_sample"
    #   BUILD_ONLY="true" INTEROP_SERVER="false"
    # - SCHEME="Sample"
    #   WORKSPACE="Sample.xcworkspace" TEST_PATH="src/objective-c/examples/Sample" BUILD_ONLY="true"
    #   INTEROP_SERVER="false"
    # - SCHEME="Sample"
    #   WORKSPACE="Sample.xcworkspace" TEST_PATH="src/objective-c/examples/Sample" BUILD_ONLY="true"
    #   INTEROP_SERVER="false" FRAMEWORKS="YES"
    # - SCHEME="SwiftSample"
    #   WORKSPACE="SwiftSample.xcworkspace" TEST_PATH="src/objective-c/examples/SwiftSample"
    #   BUILD_ONLY="true" INTEROP_SERVER="false"
jobs:
  include:
    - os: linux
      dist: xenial
      arch: arm64-graviton2
      language: python
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      dist: xenial
      arch: arm64-graviton2
      language: python
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      dist: xenial
      arch: arm64-graviton2
      language: python
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      dist: xenial
      arch: arm64-graviton2
      language: python
      env:
        - MB_PYTHON_VERSION=3.8
before_install:
  # Until Travis upgrades from Cocoapods 0.39, we need to do it here.
  # Recent pods aren't found if we don't explicitly update Cocoapods' repo.
  - if [ "${TEST}" = "objc" ]; then
      pod --version;
      gem uninstall cocoapods -a;
      gem install cocoapods -v '1.0.1';
      pod --version;
      pod repo update;
      brew install gflags;
    else
      source third_party/multibuild/common_utils.sh;
      source third_party/multibuild/travis_steps.sh;
    fi
install:
  - if [ "${TEST}" = "objc" ]; then
      pushd $TEST_PATH;
      pod install;
      popd;
    else
      build_index_wheel $PROJECT_SPEC;
    fi
before_script:
  - if [ "${TEST}" = "objc" ]; then
      if [ "${INTEROP_SERVER}" = "true" ]; then
        make interop_server;
        (bins/$CONFIG/interop_server --port=5050 &);
        (bins/$CONFIG/interop_server --port=5051 --use_tls &);
      fi
    fi
script:
  - if [ "${TEST}" = "objc" ]; then
      if [ "${BUILD_ONLY}" = "true" ]; then
        xctool -workspace "$TEST_PATH/$WORKSPACE" -scheme "$SCHEME"
        -sdk iphonesimulator9.3 build;
      else
        xctool -workspace "$TEST_PATH/$WORKSPACE" -scheme "$SCHEME"
        -sdk iphonesimulator9.3 test;
      fi
    else
      install_run $PLAT;
    fi
notifications:
  email: false
